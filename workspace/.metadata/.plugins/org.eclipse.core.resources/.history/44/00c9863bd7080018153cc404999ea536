/*
 * EspSettingsBox.cpp
 *
 *  Created on: 2 февр. 2018 г.
 *      Author: Vitaliy
 */
#include "EspSettingsBox.h"
#include "ESP8266WiFi.h"
#include "ArduinoJson.h"
#include "FS.h"

EspSettingsBox::EspSettingsBox(String fileName){
	_fileName=fileName;

}

void EspSettingsBox::printVariablesToSerial(){
	Serial.print("isAccesPoint=");Serial.print(isAccesPoint);
	Serial.print("; DeviceId=");Serial.print(DeviceId);
	Serial.print("; refreshInterval=");Serial.print(refreshInterval);
	Serial.print("; displayAlvaysOn=");Serial.println(displayAlvaysOn);
	Serial.print("; displayAutochange=");Serial.println(displayAutochange);

	Serial.print("; settingsUser=");Serial.print(settingsUser);
	Serial.print("; settingsPass=");Serial.print(settingsPass);

	Serial.print("; accessUser=");Serial.print(accessUser);
	Serial.print("; accessPass=");Serial.print(accessPass);

	Serial.print("; ssidAP=");Serial.print(ssidAP);
	Serial.print("; passwordAP=");Serial.print(passwordAP);
	Serial.print("; apIp=");Serial.print(apIp);

	Serial.print("; ssid=");Serial.print(ssid);
	Serial.print("; password=");Serial.print(password);
	Serial.print("; localIp=");Serial.print(localIp);
	Serial.print("; gateIp=");Serial.print(gateIp);
	Serial.print("; subnetIp=");Serial.print(subnetIp);
	Serial.print("; dnsIp=");Serial.print(dnsIp);
	Serial.print("; dnsIp2=");Serial.println(dnsIp2);
	Serial.print("; postDataToTSInterval=");Serial.print(postDataToTSInterval);
	Serial.print("; thingSpeakWriteKey=");Serial.println(thingSpeakWriteKey);
	Serial.print("; thingSpeakReadKey=");Serial.println(thingSpeakReadKey);
	Serial.println();}

IPAddress EspSettingsBox::stringToIp(String str){
	uint8_t pos=0;
	String tmp="";

	uint8_t ip[4];

	for(unsigned int i=0;i<=str.length();i++){
		if(str.charAt(i)=='.' || i==(str.length())){
			ip[pos]=tmp.toInt();
			pos++;
			tmp="";
		}else{
			tmp+=str[i];
		}
	}
	IPAddress result=IPAddress(ip[0],ip[1],ip[2],ip[3]);

	return result;
}

String EspSettingsBox::clearNlFromString(String str){
	String result=str;
	int index=str.lastIndexOf('\r');

	if(index){
		result=str.substring(0, index);
	}

	return result;
}

void EspSettingsBox::saveSettingsJson(){
	Serial.println("Save device settings to file");
	StaticJsonBuffer<1024> jsonBuffer;

	JsonObject& root = jsonBuffer.createObject();
	root["dId"] = DeviceId;
	root["iAp"] = isAccesPoint;
	root["rin"] = refreshInterval;
	root["dao"] = displayAlvaysOn;
	root["dac"] = displayAutochange;
	root["sur"] = settingsUser;
	root["sps"] = settingsPass;
	root["aur"] = accessUser;
	root["aps"] = accessPass;
	root["sap"] = ssidAP;
	root["pap"] = passwordAP;
	root["sid"] = ssid;
	root["pas"] = password;

	root["lip"] = localIp.toString();
	root["aip"] = apIp.toString();
	root["gip"] = gateIp.toString();
	root["sip"] = subnetIp.toString();
	root["dip"] = dnsIp.toString();
	root["dip2"] = dnsIp2.toString();

	root["pdTs"] = postDataToTSInterval;
	root["sWk"] = thingSpeakWriteKey;
	root["sRk"] = thingSpeakReadKey;

	root.printTo(Serial);

	  File settFile = SPIFFS.open(_fileName, "w");
	  root.printTo(settFile);
	  settFile.close();

	  delay(1);

	  Serial.println("Device settings saved to file");
}
void EspSettingsBox::loadSettingsJson(){
	File cssFile=SPIFFS.open("/css/w3.css", "r");

	if(cssFile.available()){
		Serial.println("---v3.CSS file available");

		String str;

		 while(cssFile.available()){
			 str=cssFile.readStringUntil('\n');
		 }

		Serial.println(str);
	}

	File file = SPIFFS.open(_fileName, "r");

	if(!file.available()){
		Serial.println("FILE not exists. Default settings save");
		saveSettingsJson();
		file = SPIFFS.open(_fileName, "r");
	}

	  if (!file){
	    Serial.println("No settings file exists");
	  } else {
	    size_t size = file.size();
	    if ( size == 0 ) {
	      Serial.println("Empty settings file");
	    } else {

	    	StaticJsonBuffer<1024> jsonBuffer;
	    	delay(1);

	      std::unique_ptr<char[]> buf (new char[size]);
	      file.readBytes(buf.get(), size);
	      JsonObject& root = jsonBuffer.parseObject(buf.get());
	      if (!root.success()) {
	        Serial.println("Impossible to read JSON file");
	      } else {
	        Serial.println("Settings parsed");
	        root.printTo(Serial);

	        DeviceId = root["dId"].asString();
	        isAccesPoint = (root["iAp"].asString() =="1") ;

	        refreshInterval = root["rin"];
			displayAlvaysOn = root["dao"];
			displayAutochange = root["dac"];
			settingsUser = root["sur"].asString();
			settingsPass = root["sps"].asString();
			accessUser = root["aur"].asString();
			accessPass = root["aps"].asString();
			ssidAP = root["sap"].asString();
			passwordAP = root["pap"].asString();
			ssid = root["sid"].asString();
			password = root["pas"].asString();

			localIp=stringToIp(String(root["lip"].asString()));
			apIp=stringToIp(String(root["aip"].asString()));
			gateIp=stringToIp(String(root["gip"].asString()));
			subnetIp=stringToIp(String(root["sip"].asString()));
			dnsIp=stringToIp(String(root["dip"].asString()));
			dnsIp2=stringToIp(String(root["dip2"].asString()));

			postDataToTSInterval = root["pdTs"];
			thingSpeakWriteKey = root["sWk"].asString();
			thingSpeakReadKey = root["sRk"].asString();

	      }
	    }
	    file.close();
	    delay(1);

	    printVariablesToSerial();
	  }

}




