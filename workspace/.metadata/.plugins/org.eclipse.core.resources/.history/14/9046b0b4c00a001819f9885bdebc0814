#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <ESP8266HTTPClient.h>

#include <Wire.h>
#include "OLED.h"

#include <OneWire.h>
#include "DallasTemperature.h"
#include "BeeperB.h"
#include "ButtonB.h"
#include "LedB.h"
#include "TimeTrigger.h"
#include <RtcDS3231.h>
#include "SensorsDS18_helper.h"
#include "DHT.h"
#include "FS.h"
#include "KeyValue.h"
#include "EspSettingsBox.h"

const String FIRMVARE_VERSION="b@l@bas-soft SENSORZ v0.0.5";

const String KEY_PREFFIX="SR_";
const String KEY_TS_PREFFIX="TS_";
const String SETT_PREFFIX="sett_SR_";

const uint8_t okButtonPin=13;
const uint8_t pageButtonPin=2;

const uint8_t am2301Pin=14;
#define DHTTYPE DHT21   // DHT 21 (AM2301)
DHT dht(am2301Pin, DHTTYPE);
float humidity;
float temperature;

boolean dhtActive=false;
String dhtName="pin_D5";
String dhtHumidityAddress="dht_hum_addr";
String dhtTemperatureAddress="dht_temp_addr";

LedB greenLed(9);
LedB redLed(10);
//BeeperB beeper(5);

ESP8266WebServer server ( 80 );

//boolean displayAlvaysOn=false;
boolean displayOn=false;
OLED display(4, 0);
//LiquidCrystal_I2C lcd(0x27, 16, 2);

uint8_t curPage=0;
//uint8_t sensorsPagesCount=0;

RtcDS3231<TwoWire> rtc(Wire);

//const int sensorBusCount=4;
const int sensorBusCount=2;

String sensorPinDescr[sensorBusCount]={"Pin_D6","Pin_D1"};
//OneWire oneWires[sensorBusCount]={OneWire(14),OneWire(12),OneWire(13),OneWire(5)};
OneWire oneWires[sensorBusCount]={OneWire(12),OneWire(5)};
DallasTemperature dallasTemperatures[sensorBusCount];
SensorsDS18_helper sensorHelper;

uint8_t totalDetectedSensors=0;
uint8_t totalActivePages=0;

boolean activePages[sensorBusCount+2]={true,false,false,false};
boolean haveActivePages=false;

boolean pageButtonHandleInLoop=false;
boolean sendToThingSpeakTriggered=false;
uint8_t sendCount=0;

TimeTrigger sensorTrigger(-5000,10000,true);
TimeTrigger displayTrigger(0,20000,true);

TimeTrigger thingSpeakTrigger(0,0,false);
TimeTrigger restartTrigger(1000,4000,false);
//uint8_t refreshInterval=10;

KeyValueContainer sensorsKVContainer("/sensors.txt");

EspSettingsBox espSettingsBox("/values.txt");

void setup ( void ) {
	//DeviceId = "Temp collector1";
	//dhtHumidityAddress=String(ESP.getChipId()) + "hum1";
	//dhtTemperatureAddress=String(ESP.getChipId()) + "temp1";
	Serial.begin ( 115200 );

	initDisplay();
	initFS();

	initSettings();
	refreshTimeTriggers();

	greenLed.init();
	redLed.init();
	rtc.Begin();
	scanI2C();

	setupButtons();
	setupButtonInterrupts();

	setupWiFi();
	initSensors(false);

	refreshSensors();
	refreshDisplay();

	displayTrigger.saveTime();

	greenLed.turnOn();
}

void loop ( void ) {
	handlePageButton();
	handleDisplayPover();

	sendDataToThingSpeak();
	checkRestartHandled();

	server.handleClient();
}

void checkRestartHandled(){
	if(restartTrigger.checkTrigger()){
		Serial.print("Restart started at ");
		Serial.println(millis());
		ESP.reset();
	}
}

void initSettings(){
	delay(500);
	int button = digitalRead(pageButtonPin);

	if(button == HIGH)
	{
		Serial.println("---STart access point -----2");
		espSettingsBox.saveSettingsJson();
		clearDisplay();
		displayLine("SoftAP mode",3,0);
		delay(500);
		Serial.println("Station vill vork as station");

		Serial.println("access point conf done");
	}else{
		//espSettingsBox.loadSettingsFromFile();
		clearDisplay();
		displayLine("Loading device",3,0);
	}

	Serial.println("-----Stat load variables from file");

	espSettingsBox.loadSettingsJson();

	Serial.println("------Variables load complete");

	delay(500);
}

void refreshTimeTriggers(){
	sensorTrigger=TimeTrigger(millis(),espSettingsBox.refreshInterval*1000,true);
	thingSpeakTrigger=TimeTrigger(millis(),espSettingsBox.postDataToTSInterval*1000,(espSettingsBox.postDataToTSInterval>0));
}


void setupButtons(){
	//pinMode(okButtonPin, INPUT);
	pinMode(pageButtonPin, INPUT);
}

void setupButtonInterrupts(){
	//attachInterrupt(okButtonPin, onOkButtonChanged, CHANGE);
	attachInterrupt(pageButtonPin, onPageButtonChanged,RISING );
	//attachInterrupt(okButtonPin, onOkButtonReleased, FALLING);
}

void clearDisplay(){
	//lcd.clear();
	display.clear();
}

void displayHoldOn(){
	clearDisplay();
	displayLine("Read sensors...", 1,0);
	displayLine("Please wait...", 3,0);
}

void initFS(){
	bool result = SPIFFS.begin();
	Serial.println("SPIFFS opened: " + result);
}

void initDisplay(){

	display.begin();
	clearDisplay();

	displayLine("Balabas-soft",1,0);
	displayLine("Loading....",3,0);
	displayLine("Hold Button to",5,0);
	displayLine("reset device",6,0);

	displayTrigger.setActive(true);
	displayOn=true;
}

void turnOnDisplay(){

	  display.on();
	  clearDisplay();
	  displayHoldOn();
	  //display.print("Request sensors...HoldOn");

	//lcd.backlight();
	  displayTrigger.saveTime();
	  displayTrigger.setActive(true);

	displayOn=true;
}

void turnOffDisplay(){

	if(!espSettingsBox.displayAlvaysOn){
		displayOn=false;
		displayTrigger.setActive(false);

		display.off();
	}
}

void refreshDisplay(){

	if(displayOn){
		String str;

		//char l1[16];
		//char l2[16];

		uint8_t sb=curPage-1;
		uint8_t dc=dallasTemperatures[sb].getDeviceCount();

		if(curPage==0){

			clearDisplay();


			if(!espSettingsBox.isAccesPoint){
				displayLine("http://",0,0);
				displayLine(WiFi.localIP().toString(),1,0);

				uint8_t sc=totalDetectedSensors;
				str=String(sc)+" sensors";
				displayLine(str,3,0);

				str=" on ("+String(totalActivePages)+") pages";

				displayLine(str,5,0);
			}else{
				String ipLine="IP="+WiFi.softAPIP().toString();

				Serial.println(WiFi.softAPIP());
				Serial.println(ipLine);

				displayLine("SETUP MODE",0,0);
				displayLine("CONNECT AND SET",1,0);
				displayLine(ipLine,3,0);
				displayLine("PORT=80",5,0);
			}

		}else{

			if(sensorTrigger.checkTrigger()){
				displayHoldOn();
				refreshSensors();
			}


			clearDisplay();

			if(curPage==(sensorBusCount+1)){
				//DHT sensor

				str=String(DHTTYPE);
				displayLine(str,0,0);

				str="----------------";
				displayLine(str,1,0);

				str="Hum: "+String(dht.readHumidity(false));
				displayLine(str,3,0);

				str="Temp:"+String(dht.readTemperature(false, false));
				displayLine(str,5,0);
			}else{
				//OneWire sensors
			str=sensorPinDescr[sb];
			if((dc)!=0){
				str+=" (";
				str+=String(dc);
				str+=" sensors) ";
			}else{
				str+=" (NO SENSORS)";
			}
			displayLine(str,0,0);

			str="----------------";
			displayLine(str,1,0);

			if(dc!=0){
				int rov=3;

				for(int j=0;j<dc;j++){
					float val=dallasTemperatures[sb].getTempCByIndex(j);

					char iStr[4];
					char fStr[5];

					sprintf(iStr, "%d", j);
					sprintf(fStr, "%.2f", val);

					str=String(iStr);
					displayLine(str,rov,0);


					str=String(fStr);
					displayLine(str,rov,5);

					rov++;
				}
			}
		}
		}

		Serial.println("Screen refresh complete");
	}

}

void displayLine(String line,uint8_t r,uint8_t c){
	char l[16];
	strcpy(l, line.c_str());
	display.print(l, r,c);
/*
	Serial.print("display.print(line,rov,column)=(");
	Serial.print(line);
	Serial.print(",");
	Serial.print(r);
	Serial.print(",");
	Serial.print(c);
	Serial.println(")");
	*/
}

void onPageButtonChanged(){
	int button = digitalRead(pageButtonPin);

	  if(button == HIGH)
	  {
		  pageButtonHandleInLoop=true;

	  }

  return;
}

void handlePageButton(){
	if(pageButtonHandleInLoop){
		if(espSettingsBox.displayAlvaysOn){
			displayOn=true;
			turnOnDisplay();
		}

		 if(displayOn){
			  curPage=getNextActivePage();
		  }

		  if(curPage>getMaxPossPage()){
			  //hm hov?
			  curPage=0;
		  }

		  if(!displayOn){
			  turnOnDisplay();
		  }

		  Serial.print("CurPage=");
		  Serial.println(curPage);

		  refreshSensors();
		  refreshDisplay();

		  displayTrigger.saveTime();

		  pageButtonHandleInLoop=false;
	}
}

void handleDisplayPover(){
	if(!espSettingsBox.displayAlvaysOn){
		if(displayTrigger.checkTrigger()){
			Serial.println("  SLeep triggered");
			turnOffDisplay();
			delay(1);
		}
	}
}

uint8_t getMaxPossPage(){
	uint8_t result=sensorBusCount+1;
/*
	Serial.print("getMaxPossPage()=");
	Serial.println(result);
*/
	return result;
}

uint8_t getNextActivePage(){
	uint8_t maxPossiblePage=getMaxPossPage();
/*
	Serial.print("curPageIn=");
	Serial.print(curPage);
	Serial.print(";");
*/
	if(totalDetectedSensors==0 || curPage==maxPossiblePage){
		Serial.println("totalDetectedSensors==0 || curPageIn==maxPossiblePage");
		return 0;
	}

	for(uint8_t i=curPage+1;i<=maxPossiblePage;i++){
		if(activePages[i]){
			/*
			Serial.print("Next non Empty page=");
			Serial.print(i);
			*/
			return i;
		}
	}

	return 0;
}

void onOkButtonChanged(){
	  int button = digitalRead(okButtonPin);
	  if(button == LOW)
	  {
		  displayTrigger.saveTime();
		  displayTrigger.setActive(true);

		  Serial.println("startTimer lastTime=");

	  }else{
		  //if(!display.isOn()){
		  if(!displayOn){
			  turnOnDisplay();

			  refreshDisplay();

			  displayTrigger.saveTime();
		  }
	  }

	  Serial.print("button state changed-----display.isOn()=");
	  Serial.println(displayOn);

	  return;
}

String sensorsToHtml(){
	String html="<table style=\"width: 219px;\" border=\"1\">";

	for(unsigned int i=0;i<sensorBusCount;i++){

		if(dallasTemperatures[i].getDeviceCount()>0){
			html+="<tr>";
			html+="<td style=\"width: 70px;\">";
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+=sensorHelper.getValueByKey(dallasTemperatures[i].getDescription());
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+="</td>";
			html+="</tr>";
		}


		html+=sensorHelper.sensorToHtml(&dallasTemperatures[i]);
	}

	html+="<tr>";
			html+="<td style=\"width: 70px;\"></td>";
			html+="<td style=\"width: 148px;\">";
			html+=sensorHelper.getValueByKey(dhtName);
			html+="<td style=\"width: 148px;\">";
			html+="</td>";
			html+="</tr>";

	html+="<tr>";
			html+="<td style=\"width: 70px;\">";
			html+=sensorHelper.getValueByKey(dhtHumidityAddress);
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+=dht.readHumidity(true);
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+="</td>";
			html+="</tr>";

	html+="<tr>";
			html+="<td style=\"width: 70px;\">";
			html+=sensorHelper.getValueByKey(dhtTemperatureAddress);
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+=dht.readTemperature(false, true);
			html+="</td>";
			html+="<td style=\"width: 148px;\">";
			html+="</td>";
			html+="</tr>";

	html+="</table>";

	return html;
}


void refreshSensors(){
	if(sensorTrigger.checkTrigger()){

	for (int i=0;i<sensorBusCount;i++){
		dallasTemperatures[i].requestTemperatures();
	}

	unsigned long startTime=millis();
	boolean timeOut=false;

	while(!timeOut){
		humidity=dht.readHumidity(true);

		timeOut=!isnan(humidity);

		if(!timeOut && (startTime+5000>millis())){
			timeOut=true;
		}

		if(!timeOut){
			delay(1000);
		}
	}

	startTime=millis();
	timeOut=false;

	while(!timeOut){

		temperature=dht.readTemperature(false, true);

		timeOut=!isnan(temperature);

		if(!timeOut && (startTime+5000>millis())){
			timeOut=true;
		}

		if(!timeOut){
			delay(1000);
		}

	}


		Serial.println("Sensors requested and refreshed");

		sensorTrigger.saveTime();
	}else{
		Serial.println("Sensors requested. Still actual data");
	}
}

int initSensors(boolean clearSettings){
	sensorsKVContainer=KeyValueContainer("/sensors.txt");

	sensorHelper.setKeyValueContainer(&sensorsKVContainer);

	uint8_t totalOneVireSensors=0;
	uint8_t totalDHTSensors=0;

	//OneVire section
	for(int i=0;i<sensorBusCount;i++){

		dallasTemperatures[i]=DallasTemperature(&oneWires[i]);
		sensorHelper.initSensor(&dallasTemperatures[i], sensorPinDescr[i]);
		uint8_t sOnCDev=dallasTemperatures[i].getDeviceCount();
		totalOneVireSensors+=sOnCDev;

		if(sOnCDev!=0){
			sensorHelper.putKeyValue(sensorPinDescr[i], sensorPinDescr[i]+"_value");

			activePages[i+1]=true;
			totalActivePages++;

			for(uint8_t j=0;j<sOnCDev;j++){
				String deviceAddressD=sensorHelper.
						getSensorAddressByIndexStr(&dallasTemperatures[i], j);

				sensorHelper.putKeyValue(deviceAddressD, deviceAddressD+"_value");
			}
		}
	}

	//DHT section

	dht.begin();
	dhtActive=dht.read(true);

	if(dhtActive){

		sensorHelper.putKeyValue(dhtName, dhtName+"_value");
		sensorHelper.putKeyValue(dhtHumidityAddress, dhtHumidityAddress+"_value");
		sensorHelper.putKeyValue(dhtTemperatureAddress, dhtTemperatureAddress+"_value");

		activePages[sensorBusCount+1]=true;
		totalDHTSensors++;
		totalActivePages++;
	}

	totalDetectedSensors=totalOneVireSensors+totalDHTSensors;

	Serial.println("Sensors initialized");
	Serial.print("OneVire count=");
	Serial.println(totalOneVireSensors);
	Serial.print("DHT count=");
	Serial.println(totalDHTSensors);
	Serial.print("totalDetectedSensors=");
	Serial.println(totalDetectedSensors);
	Serial.print("totalActivePages=");
	Serial.println(totalActivePages);
	Serial.print("activePages={");
	for(uint8_t i=0;i<sizeof(activePages);i++){
		Serial.print(activePages[i]);
		if(i!=sizeof(activePages)-1){
			Serial.print(",");
		}
	}
	Serial.println("}");

	Serial.println("------------------------------");

	sensorsKVContainer.saveToFile(clearSettings);
	sensorsKVContainer.loadFromFile();

	return totalDetectedSensors;
}


int getSensorscount(){
	int totalSensors=0;

	for(int i=0;i<sensorBusCount;i++){
		totalSensors+=dallasTemperatures[i].getDeviceCount();
	}

	return totalSensors;
}

void setupWiFi(){
	/*String str=read_string_EEPROM(0);

	Serial.println("-----");
	Serial.println(str);
	Serial.println(str.length());
	Serial.println("-----");

	 String esid=getDataFromEeprom(0,32);
	  Serial.print("SSID: ");
	  Serial.println(esid);
	  String epass = getDataFromEeprom(32,96);
	  Serial.print("PASS: ");
	  Serial.println(epass);

	  String username = getDataFromEeprom(96,128);
	  Serial.print("username: ");
	  Serial.println(username);

	  String pass = getDataFromEeprom(128,160);
	  Serial.print("password: ");
	  Serial.println(pass);
*/
	Serial.println("CHecking is access point");
	if(espSettingsBox.isAccesPoint){
		//WiFi.mode(WIFI_AP);
		Serial.println("STarting as access point");
		/*
		 WiFi.softAPConfig(espSettingsBox.apIp,espSettingsBox.gateIp,
				espSettingsBox.subnetIp);
				*/
		//WiFi.softAP(const_cast<char*>(espSettingsBox.ssidAP.c_str()),const_cast<char*>(espSettingsBox.passwordAP.c_str()));
		WiFi.softAP(const_cast<char*>(espSettingsBox.ssidAP.c_str()));
		//String apName="ESP "+ESP.getChipId();
		//WiFi.softAP(espSettingsBox.ssidAP);

		Serial.println ( "-----------" );
		Serial.print ( "SoftAP " );
		Serial.println ( espSettingsBox.ssidAP);
		Serial.print ( "IP address: " );
		Serial.println ( WiFi.softAPIP() );
		Serial.println ( "-----------" );

		Serial.print("ViFi status");
		Serial.println(WiFi.status());
		Serial.println ( "-----------" );

	}else{
		WiFi.config(espSettingsBox.localIp,espSettingsBox.gateIp,
				espSettingsBox.subnetIp,espSettingsBox.dnsIp,espSettingsBox.dnsIp2);
		WiFi.begin ( const_cast<char*>(espSettingsBox.ssid.c_str()),
				const_cast<char*>(espSettingsBox.password.c_str()) );

		// Wait for connection
		while ( WiFi.status() != WL_CONNECTED ) {
			delay ( 500 );
			Serial.print ( "." );
		}

		Serial.println ( "" );
		Serial.print ( "Connected to " );
		Serial.println ( WiFi.SSID() );
		Serial.print ( "IP address: " );
		Serial.println ( WiFi.localIP() );

		if ( MDNS.begin ( "esp8266" ) ) {
			Serial.println ( "MDNS responder started" );
		}
	}

		Serial.println ( "" );

		server.on ( "/", handleRoot );
		server.on ( "/getJson", handleJson );
		server.on ( "/setup", handleSetup );
		server.onNotFound ( handleNotFound );
		server.serveStatic("/css/w3.css", SPIFFS, "/css/w3.css");

		server.begin();
		Serial.println ( "HTTP server started" );

		Serial.print("Status=");
		Serial.println(WiFi.status());
		Serial.print(" Mac=");
		Serial.println(WiFi.macAddress());

}

char* getDateTimeStr(){
	char str[15];

	RtcDateTime dt= rtc.GetDateTime();
	sprintf(str, "%d-%d-%d %d:%d:%d",     //%d allows to print an integer to the string
		 dt.Year(),   //get year method
		 dt.Month(),  //get month method
		 dt.Day(),
		 dt.Hour(),   //get hour method
		 dt.Minute(), //get minute method
		 dt.Second()//get second method
		 );

	//Serial.println(str);

	return str;
}

String getDateStrMinus(){
	char str[11];

	RtcDateTime dt= rtc.GetDateTime();
	sprintf(str, "%d-%02d-%02d",     //%d allows to print an integer to the string
		 dt.Year(),   //get year method
		 dt.Month(),  //get month method
		 dt.Day()  //get second method
		 );

	//Serial.println(str);

	return String(str);
}

String getDateStr(){
	char str[11];

	RtcDateTime dt= rtc.GetDateTime();
	sprintf(str, "%d/%d/%d",     //%d allows to print an integer to the string
		 dt.Year(),   //get year method
		 dt.Month(),  //get month method
		 dt.Day()  //get second method
		 );

	//Serial.println(str);

	return String(str);
}

String getTimeStr(){
	char str[9];

	RtcDateTime dt= rtc.GetDateTime();
	sprintf(str, "%02d:%02d:%02d",     //%d allows to print an integer to the string
		 dt.Hour(),   //get hour method
		 dt.Minute(), //get minute method
		 dt.Second()  //get second method
		 );

	//Serial.println(str);

	return String(str);
}



void handleRoot() {

	Serial.println("Handle root");
	redLed.changeState();

	refreshSensors();
	refreshDisplay();

	getPageHtmlRoot();

	redLed.changeState();
}

void handleSetup(){

	if(espSettingsBox.settingsUser.length()!=0 && espSettingsBox.settingsPass.length()!=0){
		Serial.println("Authentication is REQUIRED for setupPage");
		if(!server.authenticate(const_cast<char*>(espSettingsBox.settingsUser.c_str()),
			const_cast<char*>(espSettingsBox.settingsPass.c_str()))){
			return server.requestAuthentication();
		}else{
			Serial.println("User entered correct User/pass");
		}
	}else{
		Serial.println("Authentication is not required for setupPage");
	}

	String secHeader="";
	String page=server.arg("page");
	String redirect="";
	uint8_t redirectDelay=0;

	String errorString;
	String warnString;
	String successString;

	boolean error=false;

	if(server.args()!=0){

		for(int i=0;i<server.args();i++){
			Serial.print("---REQUEST--- argName=");
			Serial.print(server.argName(i));
			Serial.print(" ; argValue=");
			Serial.println(server.arg(i));
		}

		if(page){
			if(page=="info"){
				secHeader="Общая информация";
			}else{
			if(page=="device"){
				secHeader="Общие настройки устройства";
				if(server.args()!=1){
					String s_DeviceId=server.arg("s_DeviceId");
					String s_settingsUser=server.arg("s_settingsUser");
					String s_settingsPass=server.arg("s_settingsPass");
					String s_accessUser=server.arg("s_accessUser");
					String s_accessPass=server.arg("s_accessPass");
					String s_displayAutochange=server.arg("s_displayAutochange");
					String s_pageAutochange=server.arg("s_pageAutochange");
					String s_displayAlvaysOn=server.arg("s_displayAlvaysOn");

					String time=server.arg("s_time");
					String date=server.arg("s_date");

					if(date.length()==0 || time.length()==0){
						errorString+="Неверное Дата/Время; ";
						error=true;
					}

					if(!s_DeviceId || s_DeviceId.length()==0){
						errorString+="Название устройства пустое; ";
						error=true;
					}
					if(!(s_settingsUser || s_settingsUser.length()==0)){
						errorString+="Администратор не задан; ";
						error=true;
					}
					if(!s_settingsPass || s_settingsPass.length()==0){
						errorString+="Пароль админа на задан; ";
						error=true;
					}
					if(((!s_accessUser || s_accessUser.length()==0)  && (s_accessPass && s_accessPass.length()!=0))||((!s_accessPass || s_accessPass.length()==0) &&  (s_accessUser && s_accessUser.length()!=0))){
						errorString+="Пользователь/пароль пользователя должны быть пустыми или быть заданы; ";
						error=true;
					}
					if((s_displayAutochange && s_displayAutochange.toInt()<0) || s_displayAutochange.length()==0){
						errorString+="Интервал обновления должен быть больше 0; ";
						error=true;
					}
					if((s_pageAutochange && s_pageAutochange.toInt()<0) || s_pageAutochange.length()==0){
						errorString+="Интервал обновления страницы датчиков должен быть больше 0; ";
						error=true;
					}

					if(!error){
						if(date.length()!=0 && time.length()!=0){
							String year="";
							String month="";
							String day="";

							String hour="";
							String minute="";
							String second="";
							//main settings form submitted
							hour=time.substring(0, 2);
							minute=time.substring(3, 5);
							second=time.substring(6, 8);

							year=date.substring(0, 4);
							month=date.substring(5, 7);
							day=date.substring(8, 10);

							RtcDateTime dateTime=RtcDateTime(year.toInt(),month.toInt(),day.toInt(),hour.toInt(),minute.toInt(),second.toInt());
							rtc.SetDateTime(dateTime);
						}

						espSettingsBox.DeviceId=s_DeviceId;
						espSettingsBox.settingsUser=s_settingsUser;
						espSettingsBox.settingsPass=s_settingsPass;
						espSettingsBox.accessUser=s_accessUser;
						espSettingsBox.accessPass=s_accessPass;
						espSettingsBox.displayAutochange=s_displayAutochange.toInt();
						espSettingsBox.pageAutochange=s_pageAutochange.toInt();
						espSettingsBox.displayAlvaysOn=(s_displayAlvaysOn=="on")?true:false;

						espSettingsBox.saveSettingsJson();

						successString="Настройки сохранены";
					}
			}
			}else{
				if(page=="net"){
					secHeader="Настройки сети и WiFi";

					if(server.args()!=1){
						String s_isAccesPoint=server.arg("s_isAccesPoint");
						String s_ssidAP=server.arg("s_ssidAP");
						String s_passwordAP=server.arg("s_passwordAP");
						String s_apIp=server.arg("s_apIp");
						String s_ssid=server.arg("s_ssid");
						String s_password=server.arg("s_password");
						String s_localIp=server.arg("s_localIp");
						String s_gateIp=server.arg("s_gateIp");
						String s_subnetIp=server.arg("s_subnetIp");
						String s_dnsIp=server.arg("s_dnsIp");
						String s_dnsIp2=server.arg("s_dnsIp2");

						boolean isAP=(s_isAccesPoint=="on"?true:false);

						if(isAP){
							if(!s_ssidAP || s_ssidAP.length()==0){
								errorString+="Название Точки Доступа пустое; ";
								error=true;
							}

							if((s_apIp || s_apIp.length()!=0) && !espSettingsBox.validateIP(s_apIp)){
								errorString+="IP точки доступа неверно; ";
								error=true;
							}

							if(!error){
								warnString="Желательно подключить устройство к роутеру. В режиме точка доступа невозможно отправить данные на сервис https://thingspeak.com";
							}
						}else{
							if(!s_ssid || s_ssid.length()==0){
								errorString+="Пустое имя подключения к роутеру (SSID); ";
								error=true;
							}
							if(!s_password || s_password.length()==0){
								errorString+="Пустой пароль подключения к роутеру (SSID PASS); ";
								error=true;
							}

							if((!s_localIp || s_localIp.length()==0) &&
									!espSettingsBox.validateIP(s_localIp)){
								errorString+="IP устройства неверно; ";
								error=true;
							}

							if((!s_gateIp || s_gateIp.length()==0) &&
									!espSettingsBox.validateIP(s_gateIp)){
								errorString+="Шлюз задан неверно; ";
								error=true;
							}
							if((!s_subnetIp || s_subnetIp.length()==0) &&
									!espSettingsBox.validateIP(s_subnetIp)){
								errorString+="Подсеть задана неверно; ";
								error=true;
							}
							if((!s_dnsIp || s_dnsIp.length()==0) &&
									!espSettingsBox.validateIP(s_dnsIp)){
								errorString+="DNS задан неверно; ";
								error=true;
							}
							if((!s_dnsIp2 || s_dnsIp2.length()==0) &&
									!espSettingsBox.validateIP(s_dnsIp2)){
								errorString+="DNS2 задан неверно; ";
								error=true;
							}
						}

						if(!error){
							espSettingsBox.isAccesPoint=isAP;
							espSettingsBox.ssidAP=s_ssidAP;
							espSettingsBox.passwordAP=s_passwordAP;
							espSettingsBox.ssid=s_ssid;
							espSettingsBox.password=s_password;
							espSettingsBox.localIp=espSettingsBox.stringToIp(s_localIp);
							espSettingsBox.apIp=espSettingsBox.stringToIp(s_apIp);
							espSettingsBox.gateIp=espSettingsBox.stringToIp(s_gateIp);
							espSettingsBox.subnetIp=espSettingsBox.stringToIp(s_subnetIp);
							espSettingsBox.dnsIp=espSettingsBox.stringToIp(s_dnsIp);
							espSettingsBox.dnsIp2=espSettingsBox.stringToIp(s_dnsIp2);

							espSettingsBox.saveSettingsJson();
							successString="Настройки сохранены. Перезагрузите устройство";
						}
					}
				}else{
					if(page=="sensors"){
						Serial.println("process sensors details save");
						delay(1);

						secHeader="Настройки датчиков";

						if(server.args()!=1){
							String s_refreshInterval=server.arg("s_refreshInterval");
							String s_postDataToTSInterval=server.arg("s_postDataToTSInterval");
							String s_thSkWKey=server.arg("s_thSkWKey");
							String s_thSkRKey=server.arg("s_thSkRKey");
							String s_thSkChId=server.arg("s_thSkChId");

							boolean postToTS=false;

							if(!s_refreshInterval || s_refreshInterval.length()==0
									|| s_refreshInterval.toInt()<60){
								errorString+="Интервал отсылки должен быть больше 60; ";
								error=true;
							}

							if(!s_postDataToTSInterval || s_postDataToTSInterval.length()==0){
								errorString+="Интервал отсылки должен быть больше 30 или равно 0 (отправка не производится); ";
								error=true;
							}else{
								int postToTsInterval=s_postDataToTSInterval.toInt();
								Serial.print("postToTSInterval=");
								Serial.println(postToTsInterval);

							if(!(postToTsInterval==0 || postToTsInterval>120)){
								errorString+="Интервал отсылки должен быть больше 120 сек или равно 0 (отправка не производится); ";
								error=true;

								if(!error){
									postToTS=true;
								}
							}else{
								Serial.println("!(postToTsInterval==0 || postToTsInterval>30)");
							}

							Serial.println("Processed sendToTSInterval()");
							}

							if(postToTS){
								if(!s_thSkWKey || s_thSkWKey.length()==0){
									errorString+="Пустой ключ записи на thingspeak.com; ";
									error=true;
								}
								if(!s_thSkRKey || s_thSkRKey.length()==0){
									errorString+="Пустой ключ чтения на thingspeak.com; ";
									error=true;
								}
								if(!s_thSkChId || s_thSkChId.length()==0){
									errorString+="Пустой канал на thingspeak.com; ";
									error=true;
								}

							//validate TS id
							int curPos=0;
							int tsId[12]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

							String preffix="";
							String keyValue="";
							int tsIdVal=-1;
							boolean found=false;

							for(int i=0;i<server.args();i++){

							 tsIdVal=-1;

							 preffix=server.argName(i).substring(0,KEY_PREFFIX.length());
							 if(KEY_TS_PREFFIX==preffix){
									keyValue=server.argName(i).substring(KEY_TS_PREFFIX.length());
									tsIdVal=server.arg(i).toInt();

									for(int j=0;j<curPos;j++){
										if((tsId[i]==tsIdVal) && (tsIdVal>-1)){
											found=true;
										}
									}

									if(found){
										error=true;
										errorString="Индекс thingSpeak должен быть уникальным";
										break;
									}else{
										if(!error){
											tsId[curPos]=tsIdVal;
											curPos++;
										}
									}

									delay(1);

								}
							}

							//end validate TS ID
							}

							if(!error){
								String preffix="";
								String keyValue="";
								String argValue="";

								for(int i=0;i<server.args();i++){

								 preffix=server.argName(i).substring(0,KEY_PREFFIX.length());
									if(KEY_PREFFIX==preffix){
										keyValue=server.argName(i).substring(KEY_PREFFIX.length());
										argValue=server.arg(i);
										Serial.print("sensors descriptor found key=");
										Serial.print(keyValue);
										Serial.print("; value=");
										Serial.print(argValue);
										Serial.println(";");

										delay(1);
										KeyValue kv=sensorsKVContainer.getKeyValue(keyValue);
										kv.setValue(argValue);
										sensorsKVContainer.putKeyValue(kv);

									}
									if(KEY_TS_PREFFIX==preffix){
										keyValue=server.argName(i).substring(KEY_TS_PREFFIX.length());
										argValue=server.arg(i);
										Serial.print("sensors TS adressFOund found key=");
										Serial.print(keyValue);
										Serial.print("; value=");
										Serial.print(argValue);
										Serial.println(";");

										delay(1);
										if(argValue.length()>0){
											KeyValue kv=sensorsKVContainer.getKeyValue(keyValue);
											kv.updateKind(argValue.toInt());
											sensorsKVContainer.putKeyValue(kv);
										}
									}
								}

								sensorsKVContainer.saveToFile(true);

								espSettingsBox.refreshInterval=s_refreshInterval.toInt();
								espSettingsBox.postDataToTSInterval=s_postDataToTSInterval.toInt();
								espSettingsBox.thSkWKey=s_thSkWKey;
								espSettingsBox.thSkRKey=s_thSkRKey;
								espSettingsBox.thSkChId=s_thSkChId.toInt();

								espSettingsBox.saveSettingsJson();
								refreshTimeTriggers();
								successString="Настройки сохранены";
								redirect="http://"+WiFi.localIP().toString()+"/setup?page=sensors";
								redirectDelay=5;
							}
						}
					}else{
						if(page=="restart"){
							secHeader="Перезапуск устройства";

							if(server.args()!=1){
								if(server.arg("doReset")=="doReset"){
									restartTrigger=TimeTrigger(millis(),3000,true);
									warnString="Устройство перегружается";

									redirect="http://"+WiFi.localIP().toString()+"/setup?page=restart";
									redirectDelay=30;
									Serial.print("Restart triggered at ");
									Serial.println(millis());
								}
								if(server.arg("doReset")=="sensors"){
									initSensors(true);
									warnString="Датчики были перезагружены";
								}
								if(server.arg("doReset")=="sendToTS"){
									sendToThingSpeakTriggered=true;
									sendCount=0;
									warnString="Даные будут отправлены в ThingSpeak";
								}

							}
						}
					}
					}
				}
			}
		}else{
			page="set";
		}

	}

	getPageHtmlSetup(page, errorString, warnString, successString, secHeader,
			redirect,redirectDelay);

}

void getPageHtmlRoot(){
	String html="<!DOCTYPE html>\
			<html>\
			<title>Датчики</title>\
			<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\
			<meta charset=\"utf-8\">\
			<link rel=\"stylesheet\" href=\"/css/w3.css\">\
			<body>\
				<script>\
					function w3_open() {\
					  document.getElementById(\"leftSidebar\").style.display = \"block\";\
					}\
					function w3_close() {\
					  document.getElementById(\"leftSidebar\").style.display = \"none\";\
					}\
				</script>\
			<div class=\"w3-sidebar w3-bar-block w3-light-grey w3-border-right w3-animate-left\" style=\"display:none\" id=\"leftSidebar\">\
			  <button class=\"w3-bar-item w3-button w3-large\" onclick=\"w3_close()\">Свернуть &times;</button>\
			  <a href=\"setup?page=info\" class=\"w3-bar-item w3-button w3-hover-green\">Настройки</a>\
			  <a href=\"https://thingspeak.com/channels/";
				html+=espSettingsBox.thSkChId;
				html+="/private_show\" class=\"w3-bar-item w3-button w3-hover-green\">ThingSpeak.com</a>\
			</div>\
	\
			<div id=\"main\">\
	\
			<div class=\"w3-teal\">\
			  <button id=\"openNavBtn\" class=\"w3-button w3-teal w3-xlarge\" onclick=\"w3_open()\">&#9776;</button>\
			  <div class=\"w3-container w3-animate-opacity\">\
				<h1>Устройство ";
					html+=espSettingsBox.DeviceId;
		 html+="</h1>\
			  </div>\
			</div>\
	\
				<div class=\"w3-container\">\
			<!--Main content starts here-->\
				 \
				 	<!--Dev info starts-->\
					<div class=\"w3-card-4\" style=\"width:25%;  float:left; min-width: 250px; min-height:270px; margin-left: 10px; margin-top: 10px; margin-right: 10px; margin-bottom: 10px;;\">\
						<div class=\"w3-container w3-teal\">\
						  <h2>Общее</h2>\
						</div>\
				 	 	<form class=\"w3-container\">\
		 					<label style=\"max-width: 240px;\"><b>Время</b></label>\
							<input class=\"w3-input w3-border\" style=\"width:95%\" name=\"s_time\" type=\"time\" value=\"";
							html+=getTimeStr();
							html+="\" disabled>\
							<label style=\"max-width: 240px;\"><b>Дата</b></label>\
							<input class=\"w3-input w3-border\" style=\"width:95%\" name=\"s_date\" type=\"date\" value=\"";
							html+=getDateStrMinus();
							html+="\" disabled>\
							<label style=\"max-width: 240px;\"><b>Имя устройства</b></label>\
							<input class=\"w3-input w3-border\" style=\"width:95%\" name=\"s_DeviceId\" type=\"text\" value=\"";
							html+=espSettingsBox.DeviceId;
							html+="\" disabled><p></p>\
		 	 	 	 	</form>\
					</div>\
					<!--Dev info ends-->";
					if(dhtActive){
						html+="\
						<!--DHT info starts-->\
						<div class=\"w3-card-4\" style=\"width:25%;  float:left; min-width: 250px; min-height:270px; margin-left: 10px; margin-top: 10px; margin-right: 10px; margin-bottom: 10px;\">\
							<div class=\"w3-container w3-teal\">\
							  <h2>";
								  html+=sensorHelper.getValueByKey(dhtName);
					   html+="</h2>\
							   </div>\
							   <form class=\"w3-container\">\
								<label style=\"max-width: 240px;\"><b>";
							html+=sensorHelper.getValueByKey(dhtHumidityAddress);
						  html+="</b></label>\
								<input class=\"w3-input w3-border\" style=\"width:95%\" name=\"s_humValue\" type=\"text\" value=\"";
								html+=dht.readHumidity(false);
								html+="\" disabled>\
								<label style=\"max-width: 240px;\"><b>";
								html+=sensorHelper.getValueByKey(dhtTemperatureAddress);
								html+="</b></label>\
								<input class=\"w3-input w3-border\" style=\"width:95%\" name=\"s_tempValue\" type=\"text\" value=\"";
								html+=dht.readTemperature(false,false);
								html+="\" disabled>\
							<p></p>\
							</form>\
						</div>\
						<!--DHT info ends-->";
					}
				for(unsigned int i=0;i<sensorBusCount;i++){
					uint8_t countz=dallasTemperatures[i].getDeviceCount();
					if(countz>0){

					html+="\
						<!--OneVIre info starts-->\
						<div class=\"w3-card-4\" style=\"width:25%;  float:left; min-width: 250px; min-height:270px; margin-left: 10px; margin-top: 10px; margin-right: 10px; margin-bottom: 10px;\">\
							<div class=\"w3-container w3-teal\">\
							  <h2>";
									html+=sensorHelper.getValueByKey(dallasTemperatures[i].getDescription());
					   html+="</h2>\
							   </div>\
							   <form class=\"w3-container\">";
					   html+=sensorHelper.sensorToHtmlV2(&dallasTemperatures[i]);

					   html+="<p></p>\
							</form>\
						</div>\
						<!--OneVire info ends-->";
					}
				}
				html+="<!--Main content ends here-->\
				</div>\
	\
			</div>\
	\
			</body>\
			</html>";


		server.send ( 200, "text/html", html );
}

void getPageHtmlSetup(String page,String errorString,String warnString,String successString,
		String secHeader,String redirect,uint8_t redirectDelay){
	/*
		<link rel="shorcut icon" href="http://www.libromania.cl/images/favicon.ico" type="image/x-icon" />
		<link rel="icon" href="http://www.libromania.cl/images/favicon.ico" type="image/x-icon" />
		 */
Serial.print("Page=");
Serial.println(page);
delay(1);
if(redirect.length()!=0){
	String html="<!DOCTYPE html>\
			<html>\
			<title>Настройки устройства</title>\
			<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\
			<meta charset=\"utf-8\">\
			<meta http-equiv=\"refresh\" content=\"";
			html+=String(redirectDelay);
			html+="; URL='";
			html+=redirect;
			html+="'\" />\
			<link rel=\"stylesheet\" href=\"/css/w3.css\">\
			<body>\
				<script>\
					window.onload = function() {\
					var countdownElement = document.getElementById('cdt'),\
						interval,\
						seconds = ";
			html+=String(redirectDelay);
			html+=";\
					interval = setInterval(function() {\
						document.getElementById('cdt').innerHTML = seconds;\
						if (seconds<=0) {\
							window.location.replace('";
			html+=redirect;
			html+="');\
						}else{\
						seconds--;};\
					}, 1000);\
				}\
				</script>\
			<input type=\"hidden\" id=\"redirTime\" name=\"page\" value=\"";
			html+=String(redirectDelay);
			html+="\">\
				<b>Обрабатываем данные. Страница обновится через </b>\
				<div id=\"cdt\"></div>";
				if(errorString.length()>0){
					html+="<div class=\"w3-panel w3-red w3-card-4\" style=\"width: 50%\">\
						  <h3>Ошибка!</h3>\
							<p>";
					html+=errorString;
					html+="</p>\
						</div>";
				}
				if(warnString.length()>0){
					html+="<div class=\"w3-panel w3-yellow w3-card-4\" style=\"width: 50%\">\
						  <h3>Предупреждение!</h3>\
							<p>";
					html+=warnString;
					html+="</p>\
						</div>";
				}
				if(successString.length()>0){
					html+="<div class=\"w3-panel w3-green w3-card-4\" style=\"width: 50%\">\
						  <h3>Отлично :-)!</h3>\
							<p>";
					html+=successString;
					html+="</p>\
						</div>";
				}
		html+="</body>\
			</html>";

			server.send ( 200, "text/html", html );
			return;
}else{
	Serial.println("Redirect is not requested");
}

		String html="<!DOCTYPE html>\
		<html>\
		<title>Настройки устройства</title>\
		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\
		<meta charset=\"utf-8\">\
		<link rel=\"stylesheet\" href=\"/css/w3.css\">\
		<body>\
		<script>\
		function w3_open() {\
			document.getElementById(\"menuSidebar\").style.display = \"block\";\
		}\
		function w3_close() {\
			document.getElementById(\"menuSidebar\").style.display = \"none\";\
		}\
		</script>\
		<!-- Sidebar -->\
		<div class=\"w3-sidebar w3-light-grey w3-bar-block\" style=\"width:20%\">\
		  <h3 class=\"w3-bar-item\">Навигация</h3>\
				<a href=\"/\" class=\"w3-bar-item w3-button w3-hover-green\">Датчики (главная)</a>\
				<a href=\"setup?page=info\" class=\"w3-bar-item w3-button w3-hover-green\">Общая информация</a>\
		  <h3 class=\"w3-bar-item\">Настройки</h3>\
		  <a href=\"setup?page=device\" class=\"w3-bar-item w3-button w3-hover-green\">Устройство</a>\
		  <a href=\"setup?page=net\" class=\"w3-bar-item w3-button w3-hover-green\">Сеть</a>\
		  <a href=\"setup?page=sensors\" class=\"w3-bar-item w3-button w3-hover-green\">Датчики</a>\
		  <a href=\"setup?page=restart\" class=\"w3-bar-item w3-button w3-hover-green\">Рестарт</a>\
		</div>\
		<!-- Page Content -->\
		<div style=\"margin-left:20%\">\
			<div class=\"w3-container w3-teal w3-animate-opacity\">\
			  <h1>";
			html+=espSettingsBox.DeviceId;
			html+="</h1>\
			</div>";
		if(errorString.length()>0){
			html+="<div class=\"w3-panel w3-red w3-card-4\">\
				  <h3>Ошибка!</h3>\
					<p>";
			html+=errorString;
			html+="</p>\
				</div>";
			}
		if(warnString.length()>0){
			html+="<div class=\"w3-panel w3-yellow w3-card-4\">\
				  <h3>Предупреждение!</h3>\
					<p>";
			html+=warnString;
			html+="</p>\
				</div>";
			}
		if(successString.length()>0){
			html+="<div class=\"w3-panel w3-green w3-card-4\">\
				  <h3>Отлично :-)!</h3>\
					<p>";
			html+=successString;
			html+="</p>\
				</div>";
			}
		html+="<div class=\"w3-container\">";
		if(page=="set"){
			html+="<p>Выберите настройки из списка слева</p>";
		}else{
			html+="<p>\
					<div class=\"w3-card-4\" style=\"width:60%; min-width: 600px;\">\
						<div class=\"w3-container w3-teal\">\
						  <h2>";
							html+=secHeader;
							html+="</h2>\
						</div>";
				if(page=="info"){
					html+=getFormDeviceInfo();
				}else{
				if(page=="device"){
					html+=getFormDeviceSettings();
				}else{
					if(page=="net"){
						html+=getFormNetSettins();
					}else{
						if(page=="sensors"){
							html+=getFormSensorsSettins();
						}else{
							if(page=="restart"){
								html+=getFormRestart();
							}
						}
						}
					}
				}
			html+="</div>\
					</p>";
		}
		html+="</div>\
		</div>\
		</body>\
		</html>";

		delay(1);
		Serial.println("Html constructed send data to customer");

		server.send ( 200, "text/html", html );
		delay(1);
}

String getFormSensorsSettins(){
	delay(1);
	String html="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
		<input type=\"hidden\" name=\"page\" value=\"sensors\">\
		<label><b>Интервал обновления датчиков</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_refreshInterval\" type=\"text\" value=\"";
		html+=espSettingsBox.refreshInterval;
		html+="\">\
		<label><b>Интервал отсылки данных на сервис https://thingspeak.com</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_postDataToTSInterval\" type=\"text\" value=\"";
		html+=espSettingsBox.postDataToTSInterval;
		html+="\">\
		<label><b>Ключ на запись https://thingspeak.com</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_thSkWKey\" type=\"text\" value=\"";
		html+=espSettingsBox.thSkWKey;
		html+="\">\
		<label><b>Ключ на чтение https://thingspeak.com</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_thSkRKey\" type=\"text\" value=\"";
		html+=espSettingsBox.thSkRKey;
		html+="\">\
		<label><b>Идентификатор канала https://thingspeak.com</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_thSkChId\" type=\"text\" value=\"";
		html+=String(espSettingsBox.thSkChId);
		html+="\">\
				<div id=\"sensorsTable\" class=\"w3-container\">\
				  <h2>Настройки датчиков</h2>\
				 <p>Адресс - уникальный идентификатор, Псевдоним - имя датчика или шины отображаемое на главной странице, Id thingSpeak - цифровой индекс датчика на сервисе (целое число >-1) если -1 то данные не отправляются, Шина данных - физический адресс куда подключены датчики</p>\
				<p>Всего подключено датчиков <b>";
		html+=String(totalDetectedSensors);
		html+="</b></p>\
				  <table class=\"w3-table-all\" style=\"width: 95%;\">\
				    <thead>\
				      <tr class=\"w3-teal\">\
				        <th>Адресс</th>\
				        <th>Псевдоним</th>\
				        <th>Id thingSpeak</th>\
				      </tr>\
				    </thead>\
				    <tr>";
			html+=sensorHelper.getSettingsHtmlTableBodyV2(KEY_PREFFIX,KEY_TS_PREFFIX);
			html+="</tr>\
				  </table>\
				</div>\
			<p>\
			<button class=\"w3-btn w3-teal\" type=\"submit\">Сохранить</button>\
			</p>\
		</p>\
		</form>";

		return html;
}

String getFormRestart(){
	delay(1);
	String html="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
		<p><label><b>Перезагрузить устройство.</b></label></p>\
		<input type=\"hidden\" name=\"page\" value=\"restart\">\
		<input type=\"hidden\" name=\"doReset\" value=\"doReset\">\
			<p>\
			<button class=\"w3-btn w3-teal\" type=\"submit\">Перезагрузить</button>\
			</p>\
		</form>";
	html+="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
			<p><label><b>Перезагрузить датчики.</b></label></p>\
			<input type=\"hidden\" name=\"page\" value=\"restart\">\
			<input type=\"hidden\" name=\"doReset\" value=\"sensors\">\
				<p>\
				<button class=\"w3-btn w3-teal\" type=\"submit\">Скинуть датчики</button>\
				</p>\
			</form>";
	html+="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
			<p><label><b>Отправить данные в ThingSpeak.</b></label></p>\
			<input type=\"hidden\" name=\"page\" value=\"restart\">\
			<input type=\"hidden\" name=\"doReset\" value=\"sendToTS\">\
				<p>\
				<button class=\"w3-btn w3-teal\" type=\"submit\">Отправить данные</button>\
				</p>\
			</form>";

		return html;
}

String getFormNetSettins(){
	delay(1);
	String html="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
		<input type=\"hidden\" name=\"page\" value=\"net\">\
		<p>\
		<input class=\"w3-check\" name=\"s_isAccesPoint\" type=\"checkbox\"";
		html+=espSettingsBox.isAccesPoint?" checked=\"checked":"";
		html+=">\
		<label><b>Устройство работает как точка доступа</b></label></p>\
		<p>Параметры точки доступа</p>\
		<label><b>Имя</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_ssidAP\" type=\"text\" value=\"";
		html+=espSettingsBox.ssidAP;
		html+="\">\
		<label><b>Пароль</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_passwordAP\" type=\"password\" value=\"";
		html+=espSettingsBox.passwordAP;
		html+="\">\
		<label><b>IP устройства</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_apIp\" type=\"text\" value=\"";
		html+=espSettingsBox.apIp.toString();
		html+="\">\
		<p>Параметры подключения к роутеру</p>\
		<label><b>Имя (SSID)</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_ssid\" type=\"text\" value=\"";
		html+=espSettingsBox.ssid;
		html+="\">\
		<label><b>Пароль (SSID PASS)</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_password\" type=\"password\" value=\"";
		html+=espSettingsBox.password;
		html+="\">\
		<label><b>IP устройства</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_localIp\" type=\"text\" value=\"";
		html+=espSettingsBox.localIp.toString();
		html+="\">\
		<label><b>Шлюз</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_gateIp\" type=\"text\" value=\"";
		html+=espSettingsBox.gateIp.toString();
		html+="\">\
		<label><b>Подсеть</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_subnetIp\" type=\"text\" value=\"";
		html+=espSettingsBox.subnetIp.toString();
		html+="\">\
		<label><b>DNS1</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_dnsIp\" type=\"text\" value=\"";
		html+=espSettingsBox.dnsIp.toString();
		html+="\">\
		<label><b>DNS2</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_dnsIp2\" type=\"text\" value=\"";
		html+=espSettingsBox.dnsIp2.toString();
		html+="\">\
			<p>\
			<button class=\"w3-btn w3-teal\" type=\"submit\">Сохранить</button>\
			</p>\
		</p>\
		</form>";

		return html;
}

String getFormDeviceInfo(){
	delay(1);
	String html="<form class=\"w3-container\"\
		<label><b>MAC адресс </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=WiFi.macAddress();;
		html+="\" disabled>\
		<label><b>Версия прошивки </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=FIRMVARE_VERSION;
		html+="\" disabled>\
		<label><b>Идентификатор чипа </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=ESP.getChipId();
		html+="\" disabled>\
		<label><b>Частота Mhz </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=ESP.getCpuFreqMHz();
		html+="\" disabled>\
		<label><b>Реальный обьем чипа байт </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=ESP.getFlashChipRealSize();
		html+="\" disabled>\
		<label><b>Размер программы байт </b></label>\
		<input class=\"w3-input w3-border\" type=\"text\" value=\"";
		html+=ESP.getSketchSize();
		html+="\" disabled><p></p></form>";
	return html;
}

String getFormDeviceSettings(){
	delay(1);
	String html="<form class=\"w3-container\" method=\"POST\" action=\"setup\">\
		<input type=\"hidden\" name=\"page\" value=\"device\">\
		<label><b>Время</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_time\" type=\"time\" value=\"";
		html+=getTimeStr();
		html+="\">\
		<label><b>Дата</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_date\" type=\"date\" value=\"";
		html+=getDateStrMinus();
		html+="\">\
		<label><b>Имя устройства</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_DeviceId\" type=\"text\" value=\"";
		html+=espSettingsBox.DeviceId;
		html+="\">\
		<label><b>Автопереключение дисплея</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_displayAutochange\" type=\"text\" value=\"";
		html+=espSettingsBox.displayAutochange;
		html+="\">\
		<label><b>Автообновление страницы с датчиками</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_pageAutochange\" type=\"text\" value=\"";
		html+=espSettingsBox.pageAutochange;
		html+="\">\
		<p>\
		<input class=\"w3-check\" name=\"s_displayAlvaysOn\" type=\"checkbox\"";
		html+=espSettingsBox.displayAlvaysOn?" checked=\"checked":"";
		html+=">\
		<label><b>Дисплей всегда включен</b></label></p>\
		<p>\
		<p>Настройки безопасности</p>\
		<label><b>Админ</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_settingsUser\" type=\"text\" value=\"";
		html+=espSettingsBox.settingsUser;
		html+="\">\
		<label><b>Пароль админа</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_settingsPass\" type=\"password\" value=\"";
		html+=espSettingsBox.settingsPass;
		html+="\">\
		<label><b>Пользователь (пустой если открыто всем)</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_accessUser\" type=\"text\" value=\"";
		html+=espSettingsBox.accessUser;
		html+="\">\
		<label><b>Пароль пользователя</b></label>\
		<input class=\"w3-input w3-border\" name=\"s_accessPass\" type=\"text\" value=\"";
		html+=espSettingsBox.accessPass;
		html+="\">\
			<p>\
			<button class=\"w3-btn w3-teal\" type=\"submit\">Сохранить</button>\
			</p>\
		</p>\
		</form>";

	return html;
}


String getHeader(int refreshTime){
	String html="<head>";
	if(refreshTime!=0){
		html+="<meta http-equiv='refresh' content='";
		html+=String(refreshTime);
		html+="'/>";
	}

	html+="<meta charset=\"utf-8\">\
    <title>balabas-soft sensors ESP8266 </title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>";

	return html;
}

boolean sendDataToThingSpeak(){

	if(thingSpeakTrigger.checkTrigger() && !sendToThingSpeakTriggered){
		Serial.println("------Thing Speak send triggered");
		sendToThingSpeakTriggered=true;
		sendCount=0;
	}

	if(sendCount>10){
		sendCount=0;
		sendToThingSpeakTriggered=false;
		Serial.println("----Send TO Thing Speak failed");
	}

	if(sendToThingSpeakTriggered){
		//String url="GET https://api.thingspeak.com/update?api_key=BN4T5Z1M0ZVALWYR&field1=0";
		String url="http://api.thingspeak.com/update?api_key="+espSettingsBox.thSkWKey;
		boolean needToSend=true;

		for(uint8_t i=0;i<sensorBusCount;i++){
			uint8_t c=dallasTemperatures[i].getDeviceCount();

			if(c>0){
				for(uint8_t j=0;j<c;j++){
					String result="";

					DeviceAddress deviceAddressD;
					boolean found=dallasTemperatures[i].getAddress(deviceAddressD, j);

					for(uint8_t k=0;k<sizeof(deviceAddressD);k++){
						result+=String(deviceAddressD[k]);
					}

					if(found){
						int8_t tsId=sensorHelper.getKeyValueByKey(result).getKind();

						if(tsId>0){
							url+="&field"+String(tsId)+"="+dallasTemperatures[i].getTempCByIndex(j);
							needToSend=true;
						}
					}
				}
			}
		}
		if(needToSend){
			Serial.println("StartSend to ThingSpeak");
			Serial.print("Send toTS url=");
			Serial.println(url);
			HTTPClient http;  //Declare an object of class HTTPClient

			http.begin(url);
			Serial.println("send get");
			delay(1);
			int httpCode = http.GET();                                                                  //Send the request
			delay(1);
			if (httpCode > 0) { //Check the returning code

			  String payload = http.getString();
			  Serial.println("-----response from thingSpeak----");
			  Serial.println(payload);
			  Serial.println("---------------------------------");
			  sendToThingSpeakTriggered=false;
			  thingSpeakTrigger.saveTime();
			  sendCount=0;

			}else{
				Serial.print("Send failed status");
				Serial.println(httpCode);
				Serial.println(http.errorToString(httpCode));
				sendCount++;
			}
		}else{
			Serial.println("Nothing to send to ThingSpeak");
			sendToThingSpeakTriggered=false;
		}

	}

	return sendToThingSpeakTriggered;
}

String getTimeFrame(){
	String html="<p>";
	html+="Последнее время измерения:  ";
	html+=getDateStr()+" " +getTimeStr();
	html+="</p>";
	html+="<p>";
	html+="MAC адресс:  ";
	html+=WiFi.macAddress();
	html+="</p>";

	return html;
}

void handleJson(){
	Serial.println("Handle Json");
	refreshSensors();

	String result="{\"device\":\"";
	result+=String(espSettingsBox.DeviceId);
	result+="\",\"date\":\"";
	result+=getDateStr();
	result+="\",\"time\": \"";
	result+=getTimeStr();
	result+="\",\"count\":";
	result+=String(getSensorscount());
	result+=",\"sensors\": [";

	for(unsigned int i=0;i<sensorBusCount;i++){
		//result+=sensorHelper.sensorToJson(&dallasTemperatures[i],getDateStr(),getTimeStr(),DeviceId);
		int length=dallasTemperatures[i].getDeviceCount();

		for(int j=0;j<length;j++){
			result+="{\"id\":";
			result+=String(j);
			result+=",\"value\":";
			result+=dallasTemperatures[i].getTempCByIndex(j);
			result+="}";
			if(j!=length-1){
				result+=",";
			}
		}

		if(i!=sensorBusCount-1){
			result+=",";
		}
	}

	result+="],";
	result+="\",\"humidity\":\"";
	result+=dht.readHumidity(true);
	result+="\",\"temp\": \"";
	result+=dht.readTemperature(false, true);
	result+="}";

	server.send ( 200, "text/html", result );
}

void handleNotFound() {
	redLed.changeState();
	String message = "File Not Found\n\n";
	message += "URI: ";
	message += server.uri();
	message += "\nMethod: ";
	message += ( server.method() == HTTP_GET ) ? "GET" : "POST";
	message += "\nArguments: ";
	message += server.args();
	message += "\n";

	for ( uint8_t i = 0; i < server.args(); i++ ) {
		message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n";
	}

	server.send ( 404, "text/plain", message );
	redLed.changeState();
}

void scanI2C(){
	 Wire.begin();

	 byte error, address;
	  int nDevices;

	  Serial.println("Scanning I2C...");

	  nDevices = 0;
	  for(address = 1; address < 127; address++ )
	  {

	    Wire.beginTransmission(address);
	    error = Wire.endTransmission();

	    if (error == 0)
	    {
	      Serial.print("I2C device found at address 0x");
	      if (address<16)
	        Serial.print("0");
	      Serial.print(address,HEX);
	      Serial.println("  !");

	      nDevices++;
	    }
	    else if (error==4)
	    {
	      Serial.print("Unknow error at address 0x");
	      if (address<16)
	        Serial.print("0");
	      Serial.println(address,HEX);
	    }
	  }
	  if (nDevices == 0)
	    Serial.println("No I2C devices found\n");
	  else
	    Serial.println("done\n");

	  delay(5000);
}

