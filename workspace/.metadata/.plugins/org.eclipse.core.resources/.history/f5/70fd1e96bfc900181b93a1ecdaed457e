/*
 * ButtonB.cpp
 *
 *  Created on: 13 џэт. 2018 у.
 *      Author: Vitaliy
 */

#include "Arduino.h"
#include "ButtonB.h"

struct ArgStructure {
	std::function<void(void)> reqFunction;
};

ButtonB::ButtonB(uint8_t pin){
	init(pin,INPUT,funcEvent,CHANGE,true,true);
}

ButtonB::ButtonB(uint8_t pin,uint8_t _pinMode,std::function<void(uint8_t)> funcEvent,int _buttonMode,boolean _resetActionFlagAfterExecution,boolean _setActionOnlyIfChangedState){
	init(pin,_pinMode,funcEvent,_buttonMode,_resetActionFlagAfterExecution,_setActionOnlyIfChangedState);
}

ButtonB::ButtonB(uint8_t pin,std::function<void(uint8_t)> funcEvent){
	init(pin,INPUT,funcEvent,CHANGE,true,true);
}

void ButtonB::init(uint8_t pin,uint8_t _pinMode,std::function<void(uint8_t)> funcEvent,int _buttonMode,boolean _resetActionFlagAfterExecution,boolean _setActionOnlyIfChangedState){
	/*if(!isInitialized()){
		pinMode(_pin, INPUT_PULLUP);
	}
	*/
	_pin=pin;
	pinMode(_pin, _pinMode);
	attachInterrupt(_pin, [this](){defaultExecFunction();}, _buttonMode);
	externalFunctionEvent=funcEvent;

	_previousStatePressed=false;
	_changedToPressed=false;

	resetActionFlagAfterExecution=_resetActionFlagAfterExecution;
	setActionOnlyIfChangedState=_setActionOnlyIfChangedState;
	actionFlagOn=false;
	actionFlagOff=false;

	initialized=true;
}

boolean ButtonB::checkPressed(){
	boolean nowPressed=getPressed();
	setPressed(nowPressed);

	return nowPressed;
}

boolean ButtonB::getPressed(){
	boolean nowPressed=(digitalRead(_pin) == HIGH)?false:true;
	return nowPressed;
}

void ButtonB::setPressed(boolean pressed){
	if(_previousStatePressed!=pressed){
		_previousStatePressed=pressed;
	}

	if(pressed && !_previousStatePressed){
		_changedToPressed=true;
	}

	if(!pressed && _previousStatePressed){
		_changedToPressed=false;
	}
}

boolean ButtonB::isStateChanged(){
	boolean nowPressed=getPressed();

	return (_previousStatePressed != nowPressed);
}

boolean ButtonB::isInitialized(){
	return initialized;
}

boolean ButtonB::isChangedToPressed(){
	return _previousStatePressed;
}

boolean ButtonB::checkChangedToPressed(){
	boolean nowPressed=getPressed();
	boolean result=false;

	if(!_previousStatePressed && nowPressed){
		result=true;
	}

		if(_previousStatePressed!=nowPressed){
			_previousStatePressed=nowPressed;
		}

		return result;
}

void ButtonB::setActionFlagOn(boolean actionFlagVal){
	actionFlagOn=actionFlagVal;
}

void ButtonB::setActionFlagOff(boolean actionFlagVal){
	actionFlagOff=actionFlagVal;
}

boolean ButtonB::getActionFlagOn(boolean doReset){
	boolean result=actionFlagOn;
	if(result && doReset){
		actionFlagOn=false;
	}
	return result;
}

boolean ButtonB::getActionFlagOff(boolean doReset){
	boolean result=actionFlagOn;
		if(result && doReset){
			actionFlagOn=false;
		}
		return result;
}

void ButtonB::defaultExecFunction(){
	Serial.println("Button interrupt catched");
	boolean isPressed=checkPressed();

	if((setActionOnlyIfChangedState && isStateChanged()) || !setActionOnlyIfChangedState){
		setActionFlagOn(isPressed);
		setActionFlagOff(!isPressed);
	}
}

boolean ButtonB::loop(){
	boolean result=false;

	if(getActionFlagOn(resetActionFlagAfterExecution)){
		handleExternalFunction(1);
		result=true;
	}

	if(getActionFlagOff(resetActionFlagAfterExecution)){
		handleExternalFunction(0);
		result=true;
	}

	return result;
}

void ButtonB::handleExternalFunction(uint8_t isTurnedOn){
	if(externalFunctionEvent!=NULL)
		externalFunctionEvent(isTurnedOn);
}

void ButtonB::handleInternalFunction(uint8_t isTurnedOn){
	Serial.println();
}




