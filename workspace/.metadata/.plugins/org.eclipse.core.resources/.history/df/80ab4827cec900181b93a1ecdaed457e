/*
 * ButtonB.cpp
 *
 *  Created on: 13 џэт. 2018 у.
 *      Author: Vitaliy
 */

#include "Arduino.h"
#include "AbstractEvent.h"

//PIN_SC:01:001   PIN_SC:pinID:pinstate:someStrCommand

AbstractEvent::AbstractEvent(String eventPreffix,uint8_t pin,uint8_t intCOmmand,String strCommand,String dispatcher){
	_eventPreffix=eventPreffix;
	_pin=pin;
	_intCOmmand=intCOmmand;
	_strCommand=strCommand;
	_dispatcher=dispatcher;

	_eventText=_eventPreffix+":"+_pin+":"+_intCOmmand+":"+_strCommand+":"+_dispatcher;

	Serial.println("Event parsed "+print());
}

AbstractEvent::AbstractEvent(String eventText){
	int ind1=eventText.indexOf(":");
	int ind2=eventText.indexOf(":",ind1);
	int ind3=eventText.indexOf(":",ind2);
	int ind4=eventText.indexOf(":",ind3);

	_eventText=eventText;
	_eventPreffix=eventText.substring(0,ind1);
	_pin=eventText.substring(ind1-1,ind2).toInt();
	_intCOmmand=eventText.substring(ind2-1,ind3).toInt();
	_strCommand=eventText.substring(ind3-1,ind4);

	Serial.println("Event parsed "+print());
}

boolean AbstractEvent::isEventOfKind(String kind){
	return getPreffix().equals(kind);
}

String AbstractEvent::getPreffix(){
	return _eventPreffix;
}
uint8_t AbstractEvent::getPin(){
	return _pin;
}
uint8_t AbstractEvent::getIntCommand(){
	return _intCOmmand;
}
String AbstractEvent::getStrCommand(){
	return _strCommand;
}

String AbstractEvent::getEventText(){
	return _eventText;
}

String AbstractEvent::print(){
return "_eventPreffix="+_eventPreffix+"_pin="+_pin+"_intCOmmand="+_intCOmmand+" _strCommand"+_strCommand;
}



